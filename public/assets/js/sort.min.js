Fancy.Mixin("Fancy.store.mixin.Sort", {
    sort: function(a, b, c, d) {
        var e, f = this;
        if (f.remoteSort)
            return void f.serverSort(a, b, c);
        switch (b) {
        case"number":
        case"checkbox":
        case"progressdonut":
        case"progressbar":
        case"grossloss":
        case"date":
        case"currency":
            e = "sortNumber";
            break;
        case"string":
        case"combo":
        case"text":
        case"color":
            e = "sortString";
            break;
        default:
            throw new Error("[FancyGrid error] - does not exist sort function for type " + b)
        }
        d.type = b, f[e](a, c, d), f.changeDataView(), f.fire("sort", {
            key: "key",
            action: a
        })
    },
    serverSort: function(a, b, c) {
        var d = this;
        d.params = d.params || {}, d.params[d.sortParam] = c, d.params[d.directionParam] = a, d.loadData()
    },
    sortNumber: function(a, b, c) {
        var d, e, f, g = this, h = [];
        if (g.grouping) {
            var i = g.getColumnOriginalValuesByGroup(b, g.grouping.by);
            switch (d = [], e = 0, f = i.length, a) {
            case"asc":
                for (; f > e; e++)
                    h = h.concat(i[e].values), d = d.concat(i[e].values.sort(function(a, b) {
                        return a - b
                    }));
                break;
            case"desc":
                for (; f > e; e++)
                    h = h.concat(i[e].values), d = d.concat(i[e].values.sort(function(a, b) {
                        return b - a
                    }))
                }
        } else 
            switch (h = g.getColumnOriginalValues(b, c), a) {
            case"asc":
                d = Fancy.Array.copy(h).sort(function(a, b) {
                    return a - b
                });
                break;
            case"desc":
                d = Fancy.Array.copy(h).sort(function(a, b) {
                    return b - a
                })
            }
        g.order = g.getOrder(h, d)
    },
    sortCheckBox: function(a, b, c) {
        var d, e = this, f = e.getColumnOriginalValues(b);
        switch (a) {
        case"asc":
            d = Fancy.Array.copy(f).sort();
            break;
        case"desc":
            d = Fancy.Array.copy(f).sort(), d = d.reverse()
        }
        e.order = e.getOrder(f, d)
    },
    sortString: function(a, b) {
        var c, d, e, f = this, g = [];
        if (f.grouping) {
            var h = f.getColumnOriginalValuesByGroup(b, f.grouping.by);
            switch (c = [], d = 0, e = h.length, a) {
            case"asc":
                for (; e > d; d++)
                    g = g.concat(h[d].values), c = c.concat(h[d].values.sort());
                break;
            case"desc":
                for (; e > d; d++)
                    g = g.concat(h[d].values), c = c.concat(h[d].values.sort().reverse())
                }
        } else 
            switch (g = f.getColumnOriginalValues(b), a) {
            case"asc":
                c = Fancy.Array.copy(g).sort();
                break;
            case"desc":
                c = Fancy.Array.copy(g).sort(), c = c.reverse()
            }
        f.order = f.getOrder(g, c)
    },
    getOrder: function(a, b) {
        for (var c, d = {}, e = 0, f = a.length, g = []; f > e; e++) {
            var h = a[e];
            void 0 === d[h] && (d[h] = []), d[h].push(e)
        }
        for (e = 0; f > e; e++)
            h = b[e], c = d[h], g.push(c[0]), c.length > 1 && c.splice(0, 1);
        return g
    },
    changeOrderIndexes: function(a, b) {
        var c = this;
        if (void 0 === b && (b = "-"), void 0 !== c.order) {
            var d = 0, e = c.order.length;
            if ("-" === b)
                for (; e > d; d++)
                    c.order[d] > a && c.order[d]--;
            else 
                for (; e > d; d++)
                    c.order[d] >= a && c.order[d]++
        }
    }
}), Fancy.define("Fancy.grid.plugin.Sorter", {
    extend: Fancy.Plugin,
    ptype: "grid.sorter",
    inWidgetName: "sorter",
    constructor: function(a) {
        var b = this;
        b.Super("const", arguments)
    },
    init: function() {
        var a = this;
        a.Super("init", arguments), a.ons()
    },
    ons: function() {
        var a = this, b = a.widget;
        b.once("render", function() {
            a.onsHeaders()
        })
    },
    onsHeaders: function() {
        var a = this, b = a.widget;
        b.on("headercellclick", a.onHeaderCellClick, a)
    },
    onHeaderCellClick: function(a, b) {
        var c, d, e, f, g, h = this, i = h.widget, j = i.store, k = Fancy.get(b.cell), l = b.side, m = b.index, n = i.clsASC, o = i.clsDESC, p = b.e, q = p.target;
        if ("input" !== q.tagName.toLocaleLowerCase()) {
            var r = k.select(".fancy-field");
            if (!(r.length > 0 && r.item(0).within(q)===!0 || k.hasClass("fancy-grid-column-resizer") || i.startResizing)) {
                switch (l) {
                case"left":
                    d = i.leftColumns;
                    break;
                case"center":
                    d = i.columns;
                    break;
                case"right":
                    d = i.rightColumns
                }
                if (c = k.hasClass(n) ? "desc" : (k.hasClass(o), "asc"), e = d[m], g = e.type, f = e.index || e.key, e.sortable===!0) {
                    switch (h.clearHeaderSortCls(), c) {
                    case"asc":
                        k.addClass(n);
                        break;
                    case"desc":
                        k.addClass(o)
                    }
                    switch (l) {
                    case"left":
                        d = i.leftColumns;
                        break;
                    case"center":
                        d = i.columns;
                        break;
                    case"right":
                        d = i.rightColumns
                    }
                    var s;
                    if (e.format)
                        if (Fancy.isString(e.format))
                            switch (e.format) {
                            case"date":
                                s = i.lang.date.read
                            } else 
                                switch (e.type) {
                                case"date":
                                    s = e.format.read
                                }
                    j.sort(c, g, f, {
                        smartIndexFn: e.smartIndexFn,
                        format: s
                    })
                }
            }
        }
    },
    clearHeaderSortCls: function() {
        var a = this, b = a.widget, c = (b.leftHeader, b.header, b.rightHeader, b.clsASC), d = b.clsDESC;
        b.el.select("." + c).removeClass(c), b.el.select("." + d).removeClass(d)
    }
});

