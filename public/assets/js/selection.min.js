Fancy.define("Fancy.grid.plugin.Selection", {
    extend: Fancy.Plugin,
    ptype: "grid.selection",
    inWidgetName: "selection",
    mixins: ["Fancy.grid.selection.mixin.Navigation"],
    constructor: function(a) {
        var b = this;
        b.Super("const", arguments)
    },
    init: function() {
        var a = this;
        a.Super("init", arguments), a.ons()
    },
    ons: function() {
        var a = this, b = a.widget;
        b.once("render", function() {
            a.initTrackOver(), a.initColumnTrackOver(), a.initCellTrackOver(), a.initCellSelection(), a.initRowSelection(), a.initColumnSelection(), b.keyNavigation && a.initNavigation()
        }), b.on("sort", a.onSort, a)
    },
    initTrackOver: function() {
        var a = this, b = a.widget;
        b.on("rowenter", a.onRowEnter, a), b.on("rowleave", a.onRowLeave, a)
    },
    initCellTrackOver: function() {
        var a = this, b = a.widget;
        b.on("cellenter", a.onCellEnter, a), b.on("cellleave", a.onCellLeave, a)
    },
    initColumnTrackOver: function() {
        var a = this, b = a.widget;
        b.on("columnenter", a.onColumnEnter, a), b.on("columnleave", a.onColumnLeave, a)
    },
    onCellEnter: function(a, b) {
        var c = this, d = c.widget;
        if (d.cellTrackOver) {
            var e = Fancy.get(b.cell);
            e.addClass(d.cellOverCls)
        }
    },
    onCellLeave: function(a, b) {
        var c = this, d = c.widget;
        if (d.cellTrackOver) {
            var e = Fancy.get(b.cell);
            e.removeClass(d.cellOverCls)
        }
    },
    onColumnEnter: function(a, b) {
        var c = this, d = c.widget, e = d.scroller;
        if (d.columnTrackOver&&!e.bottomKnobDown&&!e.rightKnobDown && b.column.trackOver!==!1) {
            var f = Fancy.get(b.columnDom);
            f.addClass(d.columnOverCls)
        }
    },
    onColumnLeave: function(a, b) {
        var c = this, d = c.widget;
        if (d.columnTrackOver) {
            var e = Fancy.get(b.columnDom);
            e.removeClass(d.columnOverCls)
        }
    },
    onRowEnter: function(a, b) {
        var c = this, d = c.widget, e = d.scroller;
        if (d.trackOver&&!e.bottomKnobDown&&!e.rightKnobDown)
            for (var f = d.getDomRow(b.rowIndex), g = 0, h = f.length; h > g; g++)
                Fancy.get(f[g]).addClass(d.rowOverCls)
    },
    onRowLeave: function(a, b) {
        var c = this, d = c.widget;
        if (d.trackOver)
            for (var e = d.getDomRow(b.rowIndex), f = 0, g = e.length; g > f; f++)
                Fancy.get(e[f]).removeClass(d.rowOverCls)
    },
    initCellSelection: function() {
        var a = this, b = a.widget;
        b.on("cellclick", a.onCellClick, a), b.on("cellmousedown", a.onCellMouseDownCells, a), b.on("cellenter", a.onCellEnterSelection, a)
    },
    initRowSelection: function() {
        var a = this, b = a.widget;
        a.selectedRows = [], b.on("rowclick", a.onRowClick, a), b.on("cellmousedown", a.onCellMouseDownRows, a), b.on("rowenter", a.onRowEnterSelection, a)
    },
    onCellMouseDownRows: function(a, b) {
        var c = this, d = c.widget;
        if (c.rows) {
            var e = d.getDomRow(b.rowIndex), f = 0, g = e.length;
            for (c.clearSelection(), c.selectedRows[0] = b; g > f; f++)
                Fancy.get(e[f]).addClass(d.cellSelectedCls);
            c.isMouseDown=!0, c.startRowSelection = b.rowIndex, Fancy.$(document).one("mouseup", function() {
                delete c.isMouseDown, delete c.startCellSelection
            }), d.fire("select")
        }
    },
    onColumnEnterSelection: function(a, b) {
        var c = this, d = c.widget;
        if (c.columns && c.isMouseDown===!0) {
            var e = {
                columnIndex: c.startColumnColumnIndex,
                side: c.startColumnSide
            }, f = {
                columnIndex: b.columnIndex,
                side: b.side
            };
            if (e.side === f.side) {
                switch (e.side) {
                case"center":
                    c.clearSelection("right"), c.clearSelection("left");
                    break;
                case"left":
                    c.clearSelection("center"), c.clearSelection("right");
                    break;
                case"right":
                    c.clearSelection("center"), c.clearSelection("left")
                }
                c.selectColumns(e.columnIndex, f.columnIndex, e.side)
            } else 
                "center" === e.side && "right" === f.side ? (c.selectColumns(e.columnIndex, d.columns.length, "center"), c.selectColumns(0, f.columnIndex, "right")) : "center" === e.side && "left" === f.side ? (c.selectColumns(0, e.columnIndex, "center"), c.selectColumns(f.columnIndex, d.leftColumns.length, "left")) : "left" === e.side && "center" === f.side ? (c.clearSelection("right"), c.selectColumns(e.columnIndex, d.leftColumns.length, "left"), c.selectColumns(0, f.columnIndex, "center")) : "left" === e.side && "right" === f.side ? (c.selectColumns(e.columnIndex, d.leftColumns.length, "left"), c.selectColumns(0, d.columns.length, "center"), c.selectColumns(0, f.columnIndex, "right")) : "right" === e.side && "center" === f.side ? (c.clearSelection("left"), c.selectColumns(0, e.columnIndex, "right"), c.selectColumns(f.columnIndex, d.columns.length, "center")) : "right" === e.side && "left" === f.side && (c.selectColumns(0, e.columnIndex, "right"), c.selectColumns(0, d.columns.length, "center"), c.selectColumns(f.columnIndex, d.leftColumns.length, "left"))
        }
    },
    onRowEnterSelection: function(a, b) {
        var c = this, d = c.widget;
        if (c.rows && c.isMouseDown===!0) {
            var e = d.getDomRow(b.rowIndex), f = 0, g = e.length;
            rowStart = c.startRowSelection, rowEnd = b.rowIndex, newSelectedRows = {}, rowStart > rowEnd && (rowStart = b.rowIndex, rowEnd = c.startRowSelection);
            for (var h = rowStart, i = rowEnd + 1; i > h; h++)
                newSelectedRows[h]=!0;
            var j = c.getSelectedRowByColumn(b.columnIndex, b.side), k = {}, l = {};
            for (var m in newSelectedRows)
                j[m]!==!0 && (k[m]=!0);
            for (var m in j)
                newSelectedRows[m]!==!0 && (l[m]=!0);
            for (var m in k)
                for (e = d.getDomRow(m), f = 0; g > f; f++)
                    Fancy.get(e[f]).addClass(d.cellSelectedCls);
            for (var m in l)
                for (e = d.getDomRow(m), f = 0; g > f; f++)
                    Fancy.get(e[f]).removeClass(d.cellSelectedCls);
            d.fire("select")
        }
    },
    getSelectedRowByColumn: function(a, b) {
        var c, d = this, e = d.widget;
        switch (b) {
        case"left":
            c = e.leftBody;
            break;
        case"center":
            c = e.body;
            break;
        case"right":
            c = e.rightBody
        }
        columnEl = c.el.select('.fancy-grid-column[index="' + a + '"]');
        for (var f = columnEl.select("." + e.cellSelectedCls), g = {}, h = 0, i = f.length; i > h; h++)
            g[Number(f.item(h).attr("index"))]=!0;
        return g
    },
    getSelectedRow: function() {
        var a = this, b = a.widget, c = b.body, d = c.el.select("." + b.cellSelectedCls);
        return Number(d.item(0).attr("index"))
    },
    getSelectedRows: function() {
        var a = this, b = a.widget, c = b.body, d = c.el.select('.fancy-grid-column[index="0"]');
        for (selectedCells = d.select("." + b.cellSelectedCls), rows = [], i = 0, iL = selectedCells.length; i < iL; i++)
            rows.push(Number(selectedCells.item(i).attr("index")));
        return rows
    },
    initColumnSelection: function() {
        var a = this, b = a.widget;
        a.selectedColumns = [], b.on("columnclick", a.onColumnClick, a), b.on("columnmousedown", a.onColumnMouseDown, a), b.on("columnenter", a.onColumnEnterSelection, a)
    },
    onColumnClick: function(a, b) {
        var c = this, d = c.widget;
        if (c.column && b.column.selectable!==!1) {
            var e = Fancy.get(b.columnDom);
            c.column && (c.selectedColumns[0] = b), c.clearSelection(), e.addClass(d.columnSelectedCls)
        }
    },
    onRowClick: function(a, b) {
        var c = this, d = c.widget;
        if (c.row && b!==!1) {
            var e = b.column, f=!0;
            if ("action" === e.type && e.items)
                for (var g = 0, h = e.items.length; h > g; g++)
                    "remove" === e.items[g].action && (f=!1);
            var i = d.getDomRow(b.rowIndex), j = 0, k = i.length;
            if (c.row && (c.selectedRows[0] = b), c.clearSelection(), f) {
                for (; k > j; j++)
                    Fancy.get(i[j]).addClass(d.cellSelectedCls);
                d.fire("select")
            }
        }
    },
    selectRow: function(a) {
        var b = this, c = b.widget;
        if (!b.row&&!b.rows)
            throw new Error("[FancyGrid Error] - row selection was not enabled");
        b.clearSelection();
        for (var d = c.getDomRow(a), e = 0, f = d.length; f > e; e++)
            Fancy.get(d[e]).addClass(c.cellSelectedCls);
        c.fire("select")
    },
    onCellClick: function(a, b) {
        var c = this, d = c.widget;
        c.cell && (c.clearSelection(), Fancy.get(b.cell).addClass(d.cellSelectedCls), d.fire("select"))
    },
    clearSelection: function(a) {
        var b = this, c = b.widget;
        if (a)
            switch (a) {
            case"left":
                c.leftBody.el.select("." + c.cellSelectedCls).removeClass(c.cellSelectedCls), c.leftBody.el.select("." + c.columnSelectedCls).removeClass(c.columnSelectedCls);
                break;
            case"center":
                c.body.el.select("." + c.cellSelectedCls).removeClass(c.cellSelectedCls), c.body.el.select("." + c.columnSelectedCls).removeClass(c.columnSelectedCls);
                break;
            case"right":
                c.rightBody.el.select("." + c.cellSelectedCls).removeClass(c.cellSelectedCls), c.rightBody.el.select("." + c.columnSelectedCls).removeClass(c.columnSelectedCls)
            } else 
                c.el.select("." + c.cellSelectedCls).removeClass(c.cellSelectedCls), c.el.select("." + c.columnSelectedCls).removeClass(c.columnSelectedCls);
        c.fire("clearselect")
    },
    onSort: function() {
        var a = this;
        a.widget;
        a.clearSelection()
    },
    onCellEnterSelection: function(a, b) {
        var c = this, d = c.widget, e = 0;
        if (c.cells && c.isMouseDown===!0) {
            c.prevCellsSelection = b.cell, c.prevCellRowIndex = b.rowIndex, c.prevCellColumnIndex = b.columnIndex, c.prevCellSide = b.side;
            var f = {
                rowIndex: c.startCellRowIndex,
                columnIndex: c.startCellColumnIndex,
                side: c.startCellSide
            }, g = {
                rowIndex: b.rowIndex,
                columnIndex: b.columnIndex,
                side: b.side
            };
            b.rowIndex < c.startCellRowIndex && (f.rowIndex = b.rowIndex, g.rowIndex = c.startCellRowIndex), c.startCellSide === b.side ? (b.columnIndex < c.startCellColumnIndex && (f.columnIndex = b.columnIndex, g.columnIndex = c.startCellColumnIndex), e = c.selectCells(f, g, f.side), "left" === c.startCellSide ? (c.clearSelection("center"), c.clearSelection("right")) : "center" === c.startCellSide ? (c.clearSelection("left"), c.clearSelection("right")) : "right" === c.startCellSide && (c.clearSelection("left"), c.clearSelection("center"))) : "left" === c.startCellSide ? (e = c.selectCells(f, {
                rowIndex: b.rowIndex,
                columnIndex: d.leftColumns.length - 1
            }, "left"), "center" === b.side ? e += c.selectCells({
                columnIndex: 0,
                rowIndex: f.rowIndex
            }, g, "center") : "right" === b.side && (e += c.selectCells({
                columnIndex: 0,
                rowIndex: f.rowIndex
            }, {
                columnIndex: d.columns.length - 1,
                rowIndex: g.rowIndex
            }, "center"), e += c.selectCells({
                columnIndex: 0,
                rowIndex: f.rowIndex
            }, g, "right"))) : "center" === c.startCellSide ? "left" === b.side ? (e += c.selectCells({
                columnIndex: 0,
                rowIndex: f.rowIndex
            }, {
                rowIndex: g.rowIndex,
                columnIndex: f.columnIndex
            }, "center"), e += c.selectCells({
                columnIndex: g.columnIndex,
                rowIndex: f.rowIndex
            }, {
                rowIndex: g.rowIndex,
                columnIndex: d.leftColumns.length - 1
            }, "left")) : "right" === b.side && (e += c.selectCells({
                columnIndex: f.columnIndex,
                rowIndex: f.rowIndex
            }, {
                columnIndex: d.columns.length - 1,
                rowIndex: g.rowIndex
            }, "center"), e += c.selectCells({
                columnIndex: 0,
                rowIndex: f.rowIndex
            }, {
                columnIndex: g.columnIndex,
                rowIndex: g.rowIndex
            }, "right")) : "right" === c.startCellSide && (e += c.selectCells({
                columnIndex: 0,
                rowIndex: f.rowIndex
            }, {
                columnIndex: f.columnIndex,
                rowIndex: g.rowIndex
            }, "right"), "center" === b.side ? e += c.selectCells({
                columnIndex: g.columnIndex,
                rowIndex: f.rowIndex
            }, {
                columnIndex: d.columns.length - 1,
                rowIndex: g.rowIndex
            }, "center") : "left" === b.side && (e += c.selectCells({
                columnIndex: 0,
                rowIndex: f.rowIndex
            }, {
                columnIndex: d.columns.length - 1,
                rowIndex: g.rowIndex
            }, "center"), e += c.selectCells({
                columnIndex: g.columnIndex,
                rowIndex: f.rowIndex
            }, {
                columnIndex: d.leftColumns.length - 1,
                rowIndex: g.rowIndex
            }, "left"))), c.endCellRowIndex = g.rowIndex, d.fire("select")
        }
    },
    onColumnMouseDown: function(a, b) {
        var c = this, d = c.widget;
        if (c.columns && b.column.selectable!==!1) {
            var e = Fancy.get(b.columnDom);
            c.isMouseDown=!0, c.startColumnColumnIndex = b.columnIndex, c.startColumnSide = b.side, c.clearSelection(), e.addClass(d.columnSelectedCls), Fancy.$(document).one("mouseup", function() {
                delete c.isMouseDown
            }), d.fire("select")
        }
    },
    onCellMouseDownCells: function(a, b) {
        var c = this, d = c.widget;
        if (d.celledit && d.celledit.hideEditor(), c.cells) {
            var e = Fancy.get(b.cell);
            c.clearSelection(), e.addClass(d.cellSelectedCls), c.isMouseDown=!0, c.startCellSelection = b.cell, c.startCellRowIndex = b.rowIndex, c.startCellColumnIndex = b.columnIndex, c.startCellSide = b.side, Fancy.$(document).one("mouseup", function() {
                delete c.isMouseDown, delete c.startCellSelection
            }), d.fire("select")
        }
    },
    selectCells: function(a, b, c) {
        var d, e, f, g = this, h = g.widget, i = h.body, j = h.leftBody, k = h.rightBody, l = a.rowIndex, m = b.rowIndex + 1, n = g.getSelectedCells(c || "center"), o = {}, p = {}, q = {};
        for (l = a.rowIndex, m = b.rowIndex + 1; m > l; l++)
            for (o[l] = o[l] || {}, e = a.columnIndex, f = b.columnIndex + 1; f > e; e++)
                o[l][e]=!0;
        for (var r in o)
            if (void 0 === n[r])
                p[r] = o[r];
            else 
                for (var s in o[r])
                    n[r][s]!==!0 && (p[r] = p[r] || {}, p[r][s]=!0);
        for (var r in n)
            if (void 0 === o[r])
                q[r] = n[r];
            else 
                for (var s in n[r])
                    o[r][s]!==!0 && (q[r] = q[r] || {}, q[r][s]=!0);
        switch (c) {
        case"left":
            d = j;
            break;
        case"center":
            d = i;
            break;
        case"right":
            d = k;
            break;
        default:
            d = i
        }
        for (var r in p)
            for (var s in p[r]) {
                var t = d.getCell(r, s);
                t.addClass(h.cellSelectedCls)
            }
        for (var r in q)
            for (var s in q[r]) {
                var t = d.getCell(r, s);
                t.removeClass(h.cellSelectedCls)
            }
    },
    getSelectedCells: function(a) {
        for (var b = this, c = b.widget, d = c.getBody(a || "center"), e = d.el.select("." + c.cellSelectedCls), f = {}, g = 0, h = e.length; h > g; g++) {
            var i = e.item(g), j = Number(i.parent().attr("index")), k = Number(i.attr("index"));
            f[k] = f[k] || {}, f[k][j]=!0
        }
        return f
    },
    getNumberSelectedCells: function() {
        var a = this, b = a.widget;
        return b.el.select("." + b.cellSelectedCls).length
    },
    getSelectedColumns: function(a) {
        for (var b = this, c = b.widget, d = c.getBody(a), e = {}, f = d.el.select("." + c.columnSelectedCls), g = 0, h = f.length; h > g; g++)
            e[f.item(g).attr("index")]=!0;
        return e
    },
    selectColumns: function(a, b, c) {
        var d = this, e = (d.widget, d.getSelectedColumns(c || "center")), f = {}, g = {}, h = {}, i = a, j = b;
        for (i > j && (i = b, j = a), j++; j > i; i++)
            f[i]=!0;
        for (var k in f)
            e[k]!==!0 && (g[k]=!0);
        for (var k in e)
            f[k]!==!0 && (h[k]=!0);
        for (var k in g)
            d.selectColumn(k, c);
        for (var k in h)
            d.deselectColumn(k, c)
    },
    selectColumn: function(a, b) {
        var c = this, d = c.widget, e = d.getBody(b || "center"), f = Fancy.get(e.getDomColumn(a));
        f.addClass(d.columnSelectedCls)
    },
    deselectColumn: function(a, b) {
        var c = this, d = c.widget, e = d.getBody(b || "center"), f = Fancy.get(e.getDomColumn(a));
        f.removeClass(d.columnSelectedCls)
    },
    getSelection: function() {
        var a = this, b = a.widget, c = b.store, d = {};
        switch (a.selModel) {
        case"row":
            d.row = a.getSelectedRow(), d.items = [c.get(d.row)];
            break;
        case"rows":
            d.rows = a.getSelectedRows(), d.items = [];
            for (var e = 0, f = d.rows.length; f > e; e++)
                d.items.push(c.get(d.rows[e]));
            break;
        case"cells":
            break;
        case"cell":
            break;
        case"column":
            break;
        case"columns":
        }
        return d.items
    }
});

